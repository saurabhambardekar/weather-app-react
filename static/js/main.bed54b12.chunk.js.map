{"version":3,"sources":["app-component/weather.jsx","app-component/form.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","icon","celcius","temp_max","temp_min","min","max","description","Form","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","document","getElementById","fetch","api_call","json","response","console","log","setState","sys","kelvintocel","main","temp","weather","getWeatherIcon","weatherIcon","id","error","changeCountry","axios","get","data","map","list","state","changeBg","bgcolor","undefined","thunderstorm","drizzle","rain","snow","atmosphere","clear","clouds","Math","floor","icons","rangeID","this","style","backgroundColor","onClick","color","borderColor","element","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bed54b12.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather = (props) => {\n    return(\n        <div>\n            <div className=\"inner-container\">\n                <h1>{props.city}</h1>\n                <i className={`wi ${props.icon}`}></i>\n                {props.celcius?\n                <h1>\n                    {props.celcius}&deg;\n                </h1>\n                :null}\n                {/* Min Max Values*/}\n                {(props.temp_max&&props.temp_min)?minmaxTemp(props.temp_min,props.temp_max):null}\n                <h4>{props.description}</h4>\n            </div>\n        </div>\n    )\n}\nfunction minmaxTemp(min,max){\n    return(\n        <h3>\n            <span>\n                {min}&deg;\n            </span>\n            <span>\n                {max}&deg;\n            </span>\n        </h3>\n    );\n}\nexport default Weather;     \n","import React from \"react\";\nimport '../app-component/form.css';\nconst Form = props => {\n    return(\n    <div className=\"form\">\n        <form onSubmit={props.loadWeather}>\n        <div>\n            <div>\n                <input type=\"text\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\n            </div>\n            <div>\n                <button>Get Weather</button>\n            </div>\n        </div>\n        </form>\n        \n    </div>  \n    )       \n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport \"weather-icons/css/weather-icons.css\";\nimport Weather from './app-component/weather';\nimport Form from './app-component/form';\nimport axios from 'axios';\nconst API_key=\"13dca4601562f6e4ac7bc529091176a2\"\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celcius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false,\n      bgcolor:true,\n      list:[],\n    }\n    this.weatherIcon={\n      thunderstorm: \"wi-thunderstorm\",\n      drizzle:\"wi-sheet\",\n      rain:\"wi-storm-showers\",\n      snow:\"wi-snow\",\n      atmosphere:\"wi-fog\",\n      clear:\"wi-clear\",\n      clouds:\"wi-day-fog\"\n      }\n  } \n  \n\n  kelvintocel(temp){\n    let degCel = Math.floor(temp-273.15); \n    return degCel\n  }\n  getWeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.weatherIcon.thunderstorm})\n        break;\n      case rangeID>=300 && rangeID<=321:\n        this.setState({icon:this.weatherIcon.drizzle})\n        break;\n      case rangeID>=500 && rangeID<=531:\n        this.setState({icon:this.weatherIcon.rain})\n        break;\n      case rangeID>=600 && rangeID<=622:\n        this.setState({icon:this.weatherIcon.snow})\n        break;\n      case rangeID>=701 && rangeID<=781:\n        this.setState({icon:this.weatherIcon.atmosphere})\n        break; \n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.weatherIcon.thunderstorm})\n        break;\n      case rangeID==800:\n        this.setState({icon:this.weatherIcon.clear})\n        break;\n      case rangeID>=801 && rangeID<=804:\n        this.setState({icon:this.weatherIcon.clouds})\n        break;\n      default:this.setState({icon:this.weatherIcon.clouds});\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();  \n    const city=e.target.elements.city.value;\n    const country=document.getElementById('select').value;  \n    if(city&&country){\n      const api_call = await fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n      const response = await api_call.json();\n      console.log(response)\n\n      this.setState(\n          {\n          city:`${response.name},${response.sys.country}`, \n          celcius:this.kelvintocel(response.main.temp),\n          temp_max:`Max: ${this.kelvintocel(response.main.temp_max)}`,\n          temp_min:`Min : ${this.kelvintocel(response.main.temp_min)}`,\n          description:response.weather[0].description,\n        }\n      )\n      this.getWeatherIcon(this.weatherIcon,response.weather[0].id)  \n    }else{\n      this.setState({error:true});\n      }\n\n  }\n  componentWillMount(){\n    this.changeCountry()\n  }\n  changeCountry = async() => { \n    const api_call = await axios.get('https://restcountries.eu/rest/v2/all')\n    const name = api_call.data.map(elements=>elements.name)\n    this.setState({\n      list:name,\n    })\n    console.log(this.state.list)\n  }\n  changeBg = () => {\n    this.setState({bgcolor:!this.state.bgcolor})\n  }\n  render(){\n    return( \n\n\n      <div className=\"App\"  style={{backgroundColor:`${this.state.bgcolor?'#87CEEB':'#0C1445'}`}}>\n        <button  onClick={this.changeBg} className=\"app-inner-btn\" style={{backgroundColor:`${this.state.bgcolor?'#87CEEB':'#0C1445'}`, color:`${this.state.bgcolor?'#0C1445':'#87CEEB'}`, borderColor:`${this.state.bgcolor?'#0C1445':'#87CEEB'}`}}>{this.state.bgcolor?'Light':'Dark'}</button>\n          <div className=\"App-inner\">\n            <select id=\"select\" className=\"select\">\n              {this.state.list.map(element => {return(\n                <option key={element} value=\"country\" className=\"select-box\">\n                  {element}\n                </option>\n              )\n              })} \n            </select>\n            <Form loadWeather={this.getWeather} error={this.state.error} />\n            <Weather \n            city={this.state.city} \n            country={this.state.country} \n            celcius={this.state.celcius} \n            temp_max={this.state.temp_max} \n            temp_min={this.state.temp_min} \n            description={this.state.description} \n            icon={this.state.icon}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}